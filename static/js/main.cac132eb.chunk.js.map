{"version":3,"sources":["components/Question.js","components/Status.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","state","displayResult","answer","trueAns","this","setState","score","wrongSound","play","id","quiz","currentQuestion","question","className","answers","map","index","key","onChange","onAnswer","bind","htmlFor","React","Component","Status","timeLeft","totalQuestion","App","currentQuestionIndex","length","interval","setInterval","ANSWER_TIME","setTimeout","updateCurrentQuestion","progress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cac132eb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Question extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displayResult: \"none\",\r\n    };\r\n  }\r\n\r\n  onAnswer(answer, trueAns) {\r\n    this.setState(state => ({ displayResult: \"block\" }));\r\n    if (answer === trueAns) {\r\n      this.setState(state => ({ score: state.score + 1 }))\r\n      this.wrongSound.play();\r\n    } else {\r\n      this.wrongSound.play();\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div id=\"question\">\r\n          <h2>{this.props.quiz[this.props.currentQuestion].question}</h2>\r\n          <div className=\"question1\">\r\n            {this.props.quiz[this.props.currentQuestion].answers.map(\r\n              (answer, index) => (\r\n                <span key={index} className=\"answer\">\r\n                  <div\r\n\r\n                    onChange={this.onAnswer.bind(\r\n                      this,\r\n                      answer,\r\n                      this.props.quiz[this.props.currentQuestion].trueAns\r\n                    )}\r\n                  />\r\n\r\n                  <label htmlFor={index}>{answer}</label>\r\n                </span>\r\n              )\r\n            )}\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n\r\nclass Status extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeLeft: this.props.timeLeft\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"number\">\r\n          <button>{this.props.currentQuestion + 1}/{this.props.totalQuestion}</button>\r\n        </div>\r\n        <div className=\"time\">\r\n          <button >{this.state.timeLeft}s</button>\r\n        </div >\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Status;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Question from \"./components/Question\";\nimport Status from \"./components/Status\";\n\nconst ANSWER_TIME = 30; \n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quiz: [\n        { question: \"Bác Hồ sinh năm bao nhiêu\", answers: [\"A: 1890\", \"B: 1891\", \"C: 1892\", \"D: 1893\"], trueAns: \"1890\" },\n        { question: \"Cậu vàng thích ăn gì?\", answers: [\"A: Xương\", \"B: Thịt Chó\", \"C: Riềng\", \"D: Patê\"], trueAns: \"Patê\" },\n        { question: \"Học không hiểu thì làm gì\", answers: [\"A: Nghỉ\", \"B: Hỏi\", \"C: Học lại\", \"D: Nói chuyện cùng bạn\"], trueAns: \"Hỏi\" },\n      ],\n      timeLeft: 30,\n      currentQuestion: 0,\n\n    };\n  }\n\n\n  updateCurrentQuestion() {\n    if (this.state.currentQuestionIndex < this.state.quiz.length - 1) {\n      this.setState(state => ({\n        currentQuestionIndex: state.currentQuestionIndex + 1\n      }));\n    }\n\n    // TODO: Reset lại đáp án\n\n  }\n\n  ticking() {\n    this.interval = setInterval(() => { }, ANSWER_TIME * 1000);\n\n    if (this.state.timeLeft > 0) {\n      // đến 0 thì ngưng\n      this.setState(state => ({ timeLeft: state.timeLeft - 1 }));\n    } else {\n      this.setState(state => ({ timeLeft: ANSWER_TIME }));\n    }\n  }\n\n  onAnswer(answer, trueAns) {\n    // Hiển thị đáp án\n    this.setState(state => ({ displayResult: \"block\" }));\n\n    // Kiểm tra đáp án\n    if (answer === trueAns) {\n      this.setState(state => ({ score: state.score + 1 }));\n\n\n    } else {\n\n    }\n\n    // Chuyển câu hỏi sau 2 giây\n    // TODO: Trong 2 giây này không cho phép chọn đáp án\n    setTimeout(() => {\n      this.updateCurrentQuestion();\n    }, 2000);\n  }\n\n\n  render() {\n    return (\n      <div className=\"table\">\n        <Status\n          updateCurrentQuestion={this.updateCurrentQuestion}\n          timeLeft={this.state.timeLeft}\n          totalQuestion={this.state.quiz.length}\n          currentQuestion={this.state.currentQuestion}\n          progress={this.state.progress}\n          score={this.state.score}\n        />\n        <Question\n          quiz={this.state.quiz}\n          currentQuestion={this.state.currentQuestion}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}